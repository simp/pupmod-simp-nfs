#!/usr/bin/ruby
<%
  SCOPE_MAPPING = {
    'one' => 'LDAP::LDAP_SCOPE_ONELEVEL',
    'sub' => 'LDAP::LDAP_SCOPE_SUBTREE',
    'default' => 'LDAP::LDAP_SCOPE_BASE'
  }

  SCOPE_MAPPING[@ldap_scope] ? t_scope = SCOPE_MAPPING[@ldap_scope] : t_scope = SCOPE_MAPPING
-%>
require 'fileutils'
require 'ldap'
require 'timeout'
require 'socket'
require 'syslog'

File.umask(0122)

ldap_params = Hash.new

servers = (["<%= Array(@uri).map { |x| x = x.split("://").last }.join(',') %>"])
server = nil
userou = 'ou=People,<%= @base_dn %>'
export_dir = '<%= @export_dir %>'
skel_dir = '<%= @skel_dir %>'
dn = '<%= @bind_dn.gsub(/'/, "\\\\'") %>'
pw = '<%= @bind_pw.gsub(/'/, "\\\\'") %>'
tls = '<%= @tls %>'
quiet = <%= @quiet %>
syslog_facility = Syslog::<%= @syslog_facility %>
syslog_priority = Syslog::<%= @syslog_priority %>
tmout = 5

begin
  Syslog.open('home_directories', Syslog::LOG_PID, syslog_facility)
rescue
  $stderr.puts("Error: Could not open connection to syslog, writing to stdout!")
  quiet = false
end

# If called from the console, we probably want to see everything.
if $stdin.isatty then
  quiet = false
end

# Return value
$retval = 0

# Did we get an argument? If so, it's probably from incrond!

cmdline = Hash.new
ARGV.each_index do |i|
  if ARGV[i+1] == '=' then
    cmdline[ARGV[i]] = ARGV[i+2]
  elsif ARGV[i] =~ /(.*)=(.*)/ then
    cmdline[$1] = $2
  else
    cmdline[ARGV[i]] = nil
  end
end

# Search through the servers and find one that works, die otherwise.
# Create a connection to LDAP and bind it
conn = nil
servers.each do |svr|
  begin
    Timeout::timeout(tmout) do
      begin
        s = TCPSocket.new(svr,<%= @port %>)
        s.close
      rescue Errno::ECONNREFUSED, Effno::EHOSTUNREACH
        raise Exception
      end

      if tls != 'false' then
        tls == 'ssl' ? tls = false : tls = true
        conn = LDAP::SSLConn.new(svr,<%= @port %>,tls)
      else
        conn = LDAP::Conn.new(svr,<%= @port %>)
      end
      conn.set_option(LDAP::LDAP_OPT_PROTOCOL_VERSION, 3)
      conn.set_option(LDAP::LDAP_OPT_TIMELIMIT, tmout)
      conn.simple_bind(dn,pw)
    end
  rescue Exception => e
    msg = [
      "Warning: Got exception '#{e}' of type '#{e.class}' while",
      "trying to connect to #{svr}"
    ]
    if e.class == LDAP::ResultError and e.to_s == 'Connect error' then
      msg << "  * This may be because the keys on this system are not trusted by #{svr}."
    end
    if not quiet then
      $stderr.puts(msg.join("\n"))
    end

    Syslog.err(msg.join("\n"))

    conn = nil
    next
  end

  server = svr
  break
end

searchAttributes = ['uid', 'gidNumber']
begin
  # Perform a search for all uid
  results = Hash.new
  userid = nil
  groupid = nil
  conn and conn.search(
    userou,
    <%= t_scope %>,
    '(objectClass=*)',
    searchAttributes,
    false,
    tmout
  ) do |entry|

    userid = entry.get_values("uid")
    groupid = entry.get_values("gidNumber")
    if not ( userid.nil? or groupid.nil? ) then
      results[userid.first] = groupid.first
    end
  end

  if not File.directory?(export_dir) then
    raise Exception("Export directory not found: #{export_dir}")
  end

  if export_dir.eql?('/') then
    raise Exception('Refusing to modify "/"')
  end

  # Variables to record what we've added and deleted.
  current_dirs = (Dir.glob("#{export_dir}/*").map{|x| x = File.basename(x)} - ['ARCHIVED'])
  new_dirs = (results.keys - current_dirs)
  to_be_archived = (current_dirs - results.keys)

  # Iterate through the new_dirs and create
  # and copy skel
  new_dirs.each do |dir|
    puts "Creating: #{dir}" if not quiet
    Syslog.log(syslog_priority, "Creating: #{dir}")
    FileUtils.mkdir "#{export_dir}/#{dir}", :mode => 0700
    FileUtils.cp_r "#{skel_dir}/.", "#{export_dir}/#{dir}", :preserve => true
    FileUtils.chown_R "#{dir}", results[dir], "#{export_dir}/#{dir}"
  end

# We only want to blow things away if the connection actually succeded.
  if !conn.nil? then
    # Check to make sure archive directory exists
    if not File.directory?("#{export_dir}/ARCHIVED") then
      FileUtils.mkdir "#{export_dir}/ARCHIVED", :mode => 0750
    end
    # Actually move the directory
    to_be_archived.each do |dir|
      puts "Archiving: #{dir}" if not quiet
      Syslog.log(syslog_priority, "Archiving: #{dir}")
      FileUtils.mv "#{export_dir}/#{dir}", "#{export_dir}/ARCHIVED/#{dir}_#{Time.now.strftime('%Y_%m_%d_%H%M%S')}"
    end
  end
rescue Exception => err
  $stderr.puts("Error: #{err.message}")
  Syslog.err("Error: #{err.message}")
  exit 1
end

if not conn.nil? and conn.bound? then
  conn.unbind
end

exit $retval
